#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include <cstdlib>
#include <ctime>
#include <iostream>
using namespace std;
typedef enum { FALSE, TRUE } boolean;
 
typedef struct tarbol
    {
        int clave;
        struct tarbol *izq;
        struct tarbol *der;
    } tarbol;
 
void crear(tarbol **a);
bool buscar(tarbol *a, int elem);
void insertar(tarbol **a, int elem);
void borrar(tarbol **a, int elem);
void inorder(tarbol *a);
void preorder(tarbol *a);
void postorder(tarbol *a);
void menu(int *w);
 
int main (){
    tarbol *a;
    int dato,r;
    crear(&a);
    do{
        menu(&r);
        switch(r){
        case 1: 
            cout<<"\n\tIngrese elemento: ";
            cin>>dato;
            insertar(&a, dato);
            break;
        case 2:
            cout<<"\n\tIngrese elemento a buscar: ";
            cin>>dato;
            buscar(a,dato);
            break;
        case 3:
            cout<<"\n\tIngrese elemento a eliminar: ";
            cin>>dato;
            borrar(&a,dato);
            break;
        case 4:
            system("cls");
            preorder(a);
            getch();
            break;
        case 5:
            system("cls");
            inorder(a);
            getch();
            break;
        case 6:
            system("cls");
            postorder(a);
            getch();
            break;
        }
         
    }while(r<=6);
    return 0;
}
 
void crear(tarbol **a)
{
    *a = NULL;
}
 
bool buscar(tarbol *a, int elem)
{
    if (a == NULL) return FALSE;
    else if (a->clave < elem) return buscar(a->der, elem);
    else if (a->clave > elem) return buscar(a->izq, elem);
    else {cout<<"\n\tValor encontrado ";
        return TRUE;
    }
}
 
void insertar(tarbol **a, int elem)
{
    if (*a == NULL) {
        *a = (tarbol *) malloc(sizeof(tarbol));
        (*a)->clave = elem;
        (*a)->izq = (*a)->der = NULL;
    }
    else if ((*a)->clave < elem) insertar(&(*a)->der, elem);
    else if ((*a)->clave > elem) insertar(&(*a)->izq, elem);
}
 
void borrar(tarbol **a, int elem)
{
    void sustituir(tarbol **a, tarbol **aux);
    tarbol *aux;
     
    if (*a == NULL)   /* no existe la clave */
        return;
     
    if ((*a)->clave < elem) borrar(&(*a)->der, elem);
    else if ((*a)->clave > elem) borrar(&(*a)->izq, elem);
    else if ((*a)->clave == elem) {
        aux = *a;
        if ((*a)->izq == NULL) *a = (*a)->der;
        else if ((*a)->der == NULL) *a = (*a)->izq;
        else sustituir(&(*a)->izq, &aux); /* se sustituye por la mayor de las menores */
         
        free(aux);
    }
}
 
void sustituir(tarbol **a, tarbol **aux)
{
    if ((*a)->der != NULL) sustituir(&(*a)->der, aux);
    else {
        (*aux)->clave = (*a)->clave;
        *aux = *a;
        *a = (*a)->izq;
    }
}
 
 
void menu(int *w){
    system("cls");
    cout<<"\n\t1.- AÃ±adir elemento";
    cout<<"\n\t2.- Buscar elemento";
    cout<<"\n\t3.- Borrar elemento";
    cout<<"\n\t4.- imprimir arbol Pre-orden";
    cout<<"\n\t5.- imprimir arbol In-orden";
    cout<<"\n\t6.- imprimir arbol Post-orden";
    cout<<"\n\t7.- Salir\n\t";
    cin>>*w;
}
 
void inorder(tarbol *m){
    if (m!=NULL){
        inorder(m->izq);
        cout<<" "<<m->clave;
        inorder(m->der);
    }
}
 
void preorder(tarbol *m){
    if (m!=NULL){
        cout<<" "<<m->clave;
        preorder(m->izq);
        preorder(m->der);
    }
}
 
void postorder(tarbol *m){
    if (m!=NULL){
        postorder(m->izq);
        postorder(m->der);
        cout<<" "<<m->clave;
    }
}
