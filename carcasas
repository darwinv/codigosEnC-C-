//---------------------  pilas---------------------------------------------------------------------------
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include <iostream>
#include <windows.h>
#include <ctime>
using namespace std;
//---------------------------------------------------------------------------
typedef struct nodo{
    int x;
    nodo *sig;
}nodo; 
     
     
void insertarC (int ele, nodo **fte, nodo **fin){
    nodo *nuevo=NULL; 
    nuevo= new(nodo); 
    if (nuevo){
        nuevo -> x=ele; 
        if ((!*fin))
            (*fte)=nuevo;
        else
            (*fin)-> sig=nuevo;
        (*fin)=nuevo;
        nuevo->sig=NULL;
    }
    else{
        cout<<"\n\t no hay memoria:"; 
    }
}
     
void eliminarC (nodo **fte, nodo **fin, nodo *dato){
    nodo *aux; 
    if ((!fte)){
        cout<<"\n\t no hay que eliminar";
    }
    else{
        aux=(*fte);
        (*fte)= (*fte)->sig;
        (*dato)=(*aux);
        free (aux);
        if (!(*fte))
            (*fin)=NULL;
        }
}
int cod=0;
void imprimirC (nodo *fte){
    nodo *aux;
    if (!fte)
        cout<<"\n\t\t Cola Vacia";
    else{
        aux=fte;
        while (aux){
            cod++;
            cout<<"TC-"<<aux->x<<cod<<" ";
            aux=aux->sig;
        }
    }
}
int recorrerC (nodo *fte){
    nodo *aux;
    int cc=0;
        aux=fte;
        while (aux){
            if(aux->x>=1){
                cc++;
            }
            aux=aux->sig;
        }
     
    return cc;
}
     
void insertarP1(int ele,int *tope, int *v,int max){
    if((*tope)==max-1)
        cout<<"\n\tPila llena";
    else{
        (*tope)++;
        v[(*tope)]=ele;
    }
}
void eliminarP1(int *tope,int *v,int *ele){
    if((*tope)==-1)
        cout<<"\n\tPila vacia";
    else{
        *ele=v[(*tope)];
        (*tope)--;
    }
}
void imprimirP1(int *v,int *tope){
    int i;
    if((*tope)!=-1)
        for(i=(*tope);i>=0;i--)
            cout<<"\n\t\t"<<v[i];
    else
        cout<<"\n\tPila vacia";
}
void insertarP2(int ele,int *tope, int *v,int max){
    if((*tope)==max-1)
        cout<<"\n\tPila llena";
    else{
        (*tope)++;
        v[(*tope)]=ele;
    }
}
void eliminarP2(int *tope,int *v,int *ele){
    if((*tope)==-1)
        cout<<"\n\tPila vacia";
    else{
        *ele=v[(*tope)];
        (*tope)--;
    }
}
void imprimirP2(int *v,int *tope){
    int i;
    if((*tope)!=-1)
        for(i=(*tope);i>=0;i--)
            cout<<"\n\t\t"<<v[i];
    else
        cout<<"\n\tPila vacia";
}
 
int main(int argc, char* argv[])
{
    int ut,i,res,cod,x,x1, x2,x3,sw,cpt,ens;
    nodo *f=NULL, *e=NULL, z;
    int p1[10],p2[10],t2=-1, t1=-1,mp1=10, mp2=10, ct=0, elem1,elem2, cp1=0, cp2=0; 
    srand (time(NULL));
    //randomize(); 
    do{
        cout<<"\n\tUnidades de Tiempo: ";
        cin>>ut;
        cout<<"\n\tManual si-1 no-2: ";
        cin>>sw;
        f=e=NULL;
        t1=t2=-1,mp1=mp2=10;
        i=0, ct=0,cp1=0,cp2=0; 
        do{
            system("cls"); 
            cod= 1;
            x=rand () % (101);
            if(x<60)
                insertarP1(cod,&t1, p1, mp1);
            x1= rand () % (101);
                if(x1<52)
                insertarP2(cod,&t2, p2, mp2);
                 
            x2= rand () % (101);
             
            if (x2<55){
                if (t1!=-1){
                    eliminarP1(&t1,p1,&elem1);
                    elem1= rand (); //Generador Código Único
                    insertarC (elem1, &f, &e);
                    }
                else
                    if (t2!=-1){
                    eliminarP2(&t2,p2,&elem2);
                    elem2= rand(); 
                    insertarC (elem2, &f, &e);
                    }
                    else
                        cout<<"\nno hay Carcasas apiladas";
            }
            else {
                if (t2!=-1){
                    eliminarP2(&t2,p2,&elem2);
                    elem2= rand(); 
                    insertarC (elem2, &f, &e);
                }
                else
                    if (t1!=-1){
                        eliminarP1(&t1,p1,&elem1);
                        elem1= rand(); 
                        insertarC (elem1, &f, &e);
                    }
                    else
                        cout<<"\nno hay Carcasas apiladas";
            }
            x3= rand () % (101);
                if (x3<50){
                    if(f!=NULL){
                        eliminarC (&f, &e, &z);
                        ct++; 
                    }
                    else
                    cout<<" cola vacia";  
                }
 
            cout<<"\n\nUT: "<<i+1;
             
            cout<<"\t--PILA 1--"; 
            imprimirP1(p1,&t1);
            cout<<"\n\n";
            cout<<"\n\t--PILA 2--";
            imprimirP2(p2,&t2);
            cout<<"\n\n";
            cout<<"\n\t-ENSAMBLE-: ";
            imprimirC(f);
            cout<<"\n\n\t\tTeclados Listos: ";
            cout<<ct;
             
            if(sw==2)
                Sleep(1000);
            else
                cin.get();
            i++;
        }while(i<ut);
         
        for(int i=t1;i>=0;i--){
            if(p1[i]>=1)
                cp1++;
        }
         
        for(int i=t2;i>=0;i--){
            if(p2[i]>=1)
                cp2++;
        }
        cpt=cp1+cp2;
        ens=recorrerC(f);
         
        cout<<"\n\n\n";
         
cout<<"\n\t\tTotal teclados ensamblados: "<<ct;
cout<<"\n\t\tTotal de carcasas de teclado que quedaron en las pilas: "<<cpt;
cout<<"\n\t\tTotal de teclados que quedaron en la cola de ensamblado: "<<ens;
         
        cout<<"\n\n\t\t\tOtra simulacion 1-si  2-no: ";
        cin>>res;
        system("cls");
    }while(res==1);
    return 0;
}
